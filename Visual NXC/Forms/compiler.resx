<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ACAAAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACLAAAAAAAA
        AAAAAACLAAAAQAAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABCAGsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAA
        AIsAAAAAAAAAAAAAAIsAAABAAAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAARgBXAUMA/QBDAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAgAAAAtwAAAAAAAAAAAAAAtwAAACAAAAAAAAAAtwAAAAAAAAD/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAEYAVwFGAO8mqhL/AUIA5gBFAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAD/AAAAIAAAACAAAAD/AAAAAAAAAAAAAAAAAAAA/wAAAP8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGAFcBRgDvKbEU/yKZEf8suBX/AUIA5gBFAHwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAD/AAAA/wAAAEAAAAAAAAAAAAAAAAAAAAAAAAAA/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARgBXAUYA7ymxFP8imRH/IpkR/yKZEf8suBX/AUIA5gBF
        AHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEYAVwFGAO8ptxT/IqUR/yKlEf8ipRH/IqUR/yKl
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAAgAAAAIAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAA/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIoAVTDAGFUhmRJVIZkSVSGZElUwwBhVAIoAVQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAtwAAAAAAAAAAAAAAtwAAACAAAAAAAAAAAAAA
        AAAAAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwBAL78XQCOXD0Ajlw9AI5cPQC+/
        F0AAiwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACLAAAAAAAAAAAAAACLAAAAQAAA
        AAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACOACsvwxcrI5oRKyOa
        ESsjmhErL8MXKwCOACsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIsAAAAAAAAAAAAA
        AIsAAABAAAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJYAFi7F
        FxYilgsWIpYLFiKWCxYuxRcWAJYAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAtwAA
        AAAAAAAAAAAAtwAAACAAAAAAAAAAtwAAAAAAAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAD/AAAAIAAAACAAAAD/AAAAAAAAAAAAAAAAAAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEAAAAD/AAAA/wAAAEAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////+ff///b3///29///9vf///b3/z/21/4/9uf8H/n3+A/
        ///AH///gA/3nwAH928AA/dv4D/3b+A/92/gP9dv4D/nb+A/95/gP///4D///+A////gP+ff///b3///
        29///9vf///b3///21///9uf///n3///////////
</value>
  </data>
</root>